{
  "stats": {
    "suites": 4,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2019-04-09T17:27:13.463Z",
    "end": "2019-04-09T17:27:13.557Z",
    "duration": 94,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "bab35831-1b69-4306-a86a-b197701a6f8a",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "82416d76-c603-4cc9-b389-7e8688ea5468",
        "title": "commit-msg()",
        "fullFile": "/Users/lukebrobbin/Documents/code/DDC-Commit-Hooks/spec/commit-msg.spec.js",
        "file": "/spec/commit-msg.spec.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "commit-msg() \"before all\" hook",
            "timedOut": false,
            "duration": 4,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "sinon.stub(process, \"exit\");\nglobal.process.env.HUSKY_GIT_PARAMS = \"spec/pre-commit.spec.js\";",
            "err": {},
            "isRoot": false,
            "uuid": "0255c8b6-f060-48ec-8219-3f2448298f6c",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "commit-msg() \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "process.exit.restore();\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "44c7015a-f352-4252-b0b4-75967f7bf70f",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Should call process.exit with 1 if the commit message does not match the provided glob",
            "fullTitle": "commit-msg() Should call process.exit with 1 if the commit message does not match the provided glob",
            "timedOut": false,
            "duration": 28,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "getCommitMessage({ commitMsg: { glob: /{a-c}/ } }, () => {\n  expect(process.exit.calledWith(1)).to.be.true;\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d9d8c2fc-d999-4fb1-b31d-35ccb912124c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "If the commit title is too short, should call process.exit",
            "fullTitle": "commit-msg() If the commit title is too short, should call process.exit",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "global.process.env.HUSKY_GIT_PARAMS =\n  \"spec/mocks/short-title-commit-message.txt\";\ngetCommitMessage({ commitMsg: { glob: /.*/, titleLength: 25 } }, () => {\n  expect(process.exit.calledWith(1)).to.be.true;\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "db4d5e22-5d04-4bc5-aef0-ee05d5b105aa",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "If the message body contains a line over the maxLineLength, should call process.exit",
            "fullTitle": "commit-msg() If the message body contains a line over the maxLineLength, should call process.exit",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "global.process.env.HUSKY_GIT_PARAMS = \"spec/mocks/line-length-too-long.txt\";\ngetCommitMessage({ commitMsg: { maxLineLength: 25, glob: /.*/ } }, () => {\n  expect(process.exit.calledWith(1)).to.be.true;\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ba7f2503-2db6-4770-bb2a-fc5afa1d6c47",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "d9d8c2fc-d999-4fb1-b31d-35ccb912124c",
          "db4d5e22-5d04-4bc5-aef0-ee05d5b105aa",
          "ba7f2503-2db6-4770-bb2a-fc5afa1d6c47"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 34,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "fec6113b-ba98-4ec7-82f9-83c3771cd643",
        "title": "pre-commit()",
        "fullFile": "/Users/lukebrobbin/Documents/code/DDC-Commit-Hooks/spec/pre-commit.spec.js",
        "file": "/spec/pre-commit.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d8b9770e-5842-433e-b67b-c3f3075f24cc",
            "title": "handleDiffResult()",
            "fullFile": "/Users/lukebrobbin/Documents/code/DDC-Commit-Hooks/spec/pre-commit.spec.js",
            "file": "/spec/pre-commit.spec.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "pre-commit() handleDiffResult() \"before all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "exitMock = sinon.stub(process, \"exit\");\nsinon.spy(preCommitFunctions, \"fileExists\");\nstatSyncMock = sinon.stub(fs, \"statSync\");\nreadFileMock = sinon.stub(fs, \"readFile\");\nmockResult = {\n  files: [\n    {\n      file: \"spec/mocks/line-length-too-long.txt\",\n      changes: 17,\n      insertions: 15,\n      deletions: 2,\n      binary: false\n    }\n  ]\n};",
                "err": {},
                "isRoot": false,
                "uuid": "e5da68af-2fba-4555-bf58-ba85c0c6b231",
                "isHook": true,
                "skipped": false
              },
              {
                "title": "\"before each\" hook",
                "fullTitle": "pre-commit() handleDiffResult() \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "statSyncMock.returns({ size: 1 });\nreadFileMock.yields(null, \"no dot only here\");",
                "err": {},
                "isRoot": false,
                "uuid": "8930903a-c6e5-45f4-abbf-840751d017ac",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "pre-commit() handleDiffResult() \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "exitMock.resetHistory();\npreCommitFunctions.fileExists.resetHistory();\nstatSyncMock.reset();\nreadFileMock.reset();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "5cab77da-6564-4efc-a273-617cbf48fe80",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should exit if there are any oversized files",
                "fullTitle": "pre-commit() handleDiffResult() Should exit if there are any oversized files",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "statSyncMock.returns({ size: 3000000 });\npreCommitFunctions.handleDiffResult(null, mockResult, {\n  preCommit: {\n    maxFileSize: 2\n  }\n});\nexpect(statSyncMock.callCount).to.equal(1);\nexpect(process.exit.callCount).to.equal(1);\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "acca545b-081e-4bdc-bff2-0ef33a59d4a1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "If dotOnlyCheck set to true, should exit if any files contain a dot only",
                "fullTitle": "pre-commit() handleDiffResult() If dotOnlyCheck set to true, should exit if any files contain a dot only",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const newMock = JSON.parse(JSON.stringify(mockResult));\nnewMock.files[0].file = \"spec/mocks/file-with-only.txt\";\nreadFileMock.yields(null, \"there is a .only here\");\npreCommitFunctions.handleDiffResult(null, newMock, {\n  preCommit: {\n    maxFileSize: 2,\n    dotOnlyCheck: true\n  }\n});\nexpect(readFileMock.callCount).to.equal(1);\nexpect(process.exit.callCount).to.equal(1);\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "b580621d-783d-43ea-95c6-803d9a8e91d8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "If dotOnlyCheck set to false, should not call process.exit if .only present",
                "fullTitle": "pre-commit() handleDiffResult() If dotOnlyCheck set to false, should not call process.exit if .only present",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const newMock = JSON.parse(JSON.stringify(mockResult));\nnewMock.files[0].file = \"spec/mocks/file-with-only.txt\";\nreadFileMock.yields(null, \"there is a .only here\");\npreCommitFunctions.handleDiffResult(null, newMock, {\n  preCommit: {\n    maxFileSize: 2\n  }\n});\nexpect(readFileMock.called).to.be.false;\nexpect(process.exit.called).to.be.false;\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "d6219416-d393-4d30-a50c-bd7b51f22874",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "If the config object contains a gitlabCi property, should call fileExists with the string '/.gitlab-ci.yml'",
                "fullTitle": "pre-commit() handleDiffResult() If the config object contains a gitlabCi property, should call fileExists with the string '/.gitlab-ci.yml'",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "preCommitFunctions.handleDiffResult(null, mockResult, {\n  preCommit: {\n    maxFileSize: 2,\n    gitlabCi: true\n  }\n});\nexpect(preCommitFunctions.fileExists.calledOnceWith(\"/.gitlab-ci.yml\")).to\n  .be.true;\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "678b753b-4e4b-405d-908d-2df4258dd3a0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "If the config object does not contain a gitlabCi property, should not call fileExists with the string '/.gitlab-ci.yml'",
                "fullTitle": "pre-commit() handleDiffResult() If the config object does not contain a gitlabCi property, should not call fileExists with the string '/.gitlab-ci.yml'",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "preCommitFunctions.handleDiffResult(null, mockResult, {\n  preCommit: {\n    maxFileSize: 2\n  }\n});\nexpect(preCommitFunctions.fileExists.called).to.be.false;\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "52a398f8-5064-4e48-89b0-d8cb4613be89",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "If the config object contains a esLintCheck property, should call fileExists with the string '/.eslintrc'",
                "fullTitle": "pre-commit() handleDiffResult() If the config object contains a esLintCheck property, should call fileExists with the string '/.eslintrc'",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "preCommitFunctions.handleDiffResult(null, mockResult, {\n  preCommit: {\n    maxFileSize: 2,\n    esLintCheck: true\n  }\n});\nexpect(preCommitFunctions.fileExists.calledOnceWith(\"/.eslintrc\")).to.be\n  .true;\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "004cf35a-7eb0-4163-8bb3-4f0eaeacf60e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "If the config object does not contain a esLintCheck property, should not call fileExists with the string '/.eslintrc'",
                "fullTitle": "pre-commit() handleDiffResult() If the config object does not contain a esLintCheck property, should not call fileExists with the string '/.eslintrc'",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "preCommitFunctions.handleDiffResult(null, mockResult, {\n  preCommit: { maxFileSize: 2 }\n});\nexpect(preCommitFunctions.fileExists.called).to.be.false;\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "676df28c-bf68-4a82-a8ff-995af3c67a13",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "If cypress is truthy in config, should call file Exists with the correct arg",
                "fullTitle": "pre-commit() handleDiffResult() If cypress is truthy in config, should call file Exists with the correct arg",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "preCommitFunctions.handleDiffResult(null, mockResult, {\n  preCommit: { maxFileSize: 2, cypress: \"./cypress\" }\n});\nexpect(preCommitFunctions.fileExists.calledOnceWith(\"./cypress\")).to.be\n  .true;\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "95d2d9ef-c727-4c90-9542-881053f288b8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "If Robot is truthy in config, should call file Exists with the correct arg",
                "fullTitle": "pre-commit() handleDiffResult() If Robot is truthy in config, should call file Exists with the correct arg",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "preCommitFunctions.handleDiffResult(null, mockResult, {\n  preCommit: { maxFileSize: 2, robot: \"./robot\" }\n});\nexpect(preCommitFunctions.fileExists.calledWith(\"./robot\")).to.be.true;\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "b4e5a4a3-5597-4d39-836a-3319d6b3b8ff",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "acca545b-081e-4bdc-bff2-0ef33a59d4a1",
              "b580621d-783d-43ea-95c6-803d9a8e91d8",
              "d6219416-d393-4d30-a50c-bd7b51f22874",
              "678b753b-4e4b-405d-908d-2df4258dd3a0",
              "52a398f8-5064-4e48-89b0-d8cb4613be89",
              "004cf35a-7eb0-4163-8bb3-4f0eaeacf60e",
              "676df28c-bf68-4a82-a8ff-995af3c67a13",
              "95d2d9ef-c727-4c90-9542-881053f288b8",
              "b4e5a4a3-5597-4d39-836a-3319d6b3b8ff"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "0ca88074-8c96-4581-8e40-0bd24bd7bbf1",
            "title": "fileExists()",
            "fullFile": "/Users/lukebrobbin/Documents/code/DDC-Commit-Hooks/spec/pre-commit.spec.js",
            "file": "/spec/pre-commit.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should returns false if the file does not exist",
                "fullTitle": "pre-commit() fileExists() Should returns false if the file does not exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sinon.stub(fs, \"existsSync\").returns(false);\nexpect(preCommitFunctions.fileExists(\"spec/pre-commit.spec.js\")).to.be\n  .false;\nfs.existsSync.restore();",
                "err": {},
                "isRoot": false,
                "uuid": "367e60da-2c5c-4cac-a8a4-dee382612a0e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return true if the file exists",
                "fullTitle": "pre-commit() fileExists() Should return true if the file exists",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = preCommitFunctions.fileExists(\"spec/pre-commit.spec.js\");\nexpect(result).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "58b07549-7d27-4a31-87cc-9d055318c1bd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "367e60da-2c5c-4cac-a8a4-dee382612a0e",
              "58b07549-7d27-4a31-87cc-9d055318c1bd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}